---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
{{ include "cardano-node.labels" . | indent 4 }}
  name: {{ include "cardano-node.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{ include "cardano-node.matchLabels" . | nindent 6 }}
  serviceName: {{ include "cardano-node.fullname" . }}-headless
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        kubectl.kubernetes.io/default-container: cardano-node
      labels:
{{ include "cardano-node.labels" . | indent 8 }}
{{- with .Values.extraPodLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
{{- if .Values.affinity }}
      affinity: {{ .Values.affinity | toYaml | nindent 8 }}
{{- end }}
      containers:
      - env:
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
        - name: CARDANO_DATABASE_PATH
          value: /data/db
        - name: CARDANO_SOCKET_PATH
          value: /ipc/node.socket
        - name: NETWORK
          value: {{ .Values.cardano_network }}
        - name: CARDANO_PORT
          value: "{{ .Values.service.ports.ntn.targetPort }}"
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: IfNotPresent
        name: cardano-node
        ports:
        - name: ntn
          containerPort: {{ .Values.service.ports.ntn.targetPort }}
        ports:
        - name: metrics
          containerPort: {{ .Values.service.ports.metrics.targetPort }}
        resources: {{ .Values.resources | toYaml | nindent 10 }}
        volumeMounts:
        - mountPath: /data
          name: node-db
        - mountPath: /ipc
          name: node-ipc
      - command:
        - sh
        - -c
        - socat TCP-LISTEN:${PORT},fork UNIX-CLIENT:/ipc/node.socket,ignoreeof
        env:
        - name: PORT
          value: "{{ .Values.service.ports.socatNtc.targetPort }}"
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: IfNotPresent
        name: socat-ntc
        ports:
        - containerPort: {{ .Values.service.ports.socatNtc.targetPort }}
        resources: {}
        volumeMounts:
        - mountPath: /ipc
          name: node-ipc
{{- if .Values.sidecars }}
{{- .Values.sidecars | toYaml | nindent 6 }}
{{- end }}
      restartPolicy: Always
      serviceAccountName: ""
{{- if .Values.tolerations }}
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
{{- end }}
      volumes:
      - name: node-db
        persistentVolumeClaim:
          claimName: node-db
      - emptyDir: {}
        name: node-ipc
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      labels:
        cardano_network: {{ .Values.cardano_network }}
      name: node-db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage.size }}
{{- if .Values.storage.storageClassName }}
      storageClassName: {{ .Values.storage.storageClassName }}
{{- end }}
