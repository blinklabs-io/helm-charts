---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kupo.fullname" . }}
  labels:
    {{- include "kupo.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "kupo.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kupo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kupo.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "kupo.fullname" .) }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and (eq .Values.connectionMethod.node.enabled true) .Values.connectionMethod.node.configFetch.enabled }}
      initContainers:
        - name: config-fetch
          image: "{{ .Values.connectionMethod.node.configFetch.image.repository }}{{ if .Values.connectionMethod.node.configFetch.image.tag }}:{{ .Values.connectionMethod.node.configFetch.image.tag }}{{ end }}"
          imagePullPolicy: {{ .Values.connectionMethod.node.configFetch.image.pullPolicy }}
          args:
            - "{{ .Values.connectionMethod.node.configFetch.targetDir }}/config"
            - "{{ .Values.connectionMethod.node.configFetch.network }}"
          volumeMounts:
            - name: config-dir
              mountPath: {{ .Values.connectionMethod.node.configFetch.targetDir }}
      {{- end }}
      containers:
        - name: main
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            {{- if eq .Values.connectionMethod.node.enabled true }}
            - --node-socket
            - "{{ .Values.connectionMethod.node.nodeSocket.path }}"
            - --node-config
            {{- if eq .Values.connectionMethod.node.configFetch.enabled true }}
            - "{{ .Values.connectionMethod.node.configFetch.targetDir }}/config/{{ .Values.connectionMethod.node.configFetch.network }}/config.json"
            {{- else if eq .Values.connectionMethod.node.nodeConfig.enabled true }}
            - "{{ .Values.connectionMethod.node.nodeConfig.path }}"
            {{- end }}
            {{- else if eq .Values.connectionMethod.ogmios.enabled true }}
            - --ogmios-host
            - "{{ .Values.connectionMethod.ogmios.host }}"
            - --ogmios-port
            - "{{ .Values.connectionMethod.ogmios.port }}"
            {{- else if eq .Values.connectionMethod.hydra.enabled true }}
            - --hydra-host
            - "{{ .Values.connectionMethod.hydra.host }}"
            - --hydra-port
            - "{{ .Values.connectionMethod.hydra.port }}"
            {{- end }}
            {{- if not .Values.kupo.storage.inMemory }}
            - --workdir
            - "{{ .Values.kupo.storage.workDir }}"
            {{- else }}
            - --in-memory
            {{- end }}
            - --host
            - "{{ .Values.kupo.server.host }}"
            - --port
            - "{{ .Values.kupo.server.port | toString }}"
            - --since
            - "{{ .Values.kupo.since }}"
            - --match
            - "{{ .Values.kupo.match }}"
            {{- if .Values.kupo.pruneUtxo }}
            - --prune-utxo
            {{- end }}
            {{- if .Values.kupo.deferDbIndexes }}
            - --defer-db-indexes
            {{- end }}
            - --log-level
            - "{{ .Values.kupo.logLevel }}"
          ports:
            - name: http
              containerPort: {{ .Values.kupo.server.port }}
              protocol: TCP
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.environment }}
          env:
            {{- toYaml .Values.environment | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if and (eq .Values.connectionMethod.node.configFetch.enabled true) .Values.connectionMethod.node.enabled true }}
            - name: config-dir
              mountPath: {{ .Values.connectionMethod.node.configFetch.targetDir }}
            - name: cardanoipc
              mountPath: /ipc
            {{- end }}
            - name: db
              mountPath: {{ .Values.kupo.storage.workDir }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  URL='http://localhost:1442/health';
                  METRICS=$(wget -qO- --header="Accept: text/plain" $URL);
                  NODE_TIP=$(echo "$METRICS" | grep 'kupo_most_recent_node_tip' | awk '{print $NF}' | tr -d '"');
                  CHECKPOINT=$(echo "$METRICS" | grep 'kupo_most_recent_checkpoint' | awk '{print $NF}' | tr -d '"');
                  if [ -z "$NODE_TIP" ] || [ -z "$CHECKPOINT" ]; then
                    echo 'Error: NODE_TIP or CHECKPOINT is null.';
                    exit 1;
                  fi;
                  if [ "$NODE_TIP" = '0' ] || [ "$CHECKPOINT" = '0' ]; then
                    echo 'Error: NODE_TIP or CHECKPOINT is 0.';
                    exit 1;
                  fi;
                  if [ "$NODE_TIP" = "$CHECKPOINT" ]; then
                    exit 0;
                  else
                    exit 1;
                  fi
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
        {{- if eq .Values.connectionMethod.node.enabled true }}
        - name: socat
          image: "{{ .Values.connectionMethod.node.socat.image.repository }}:{{ .Values.connectionMethod.node.socat.image.tag }}"
          imagePullPolicy: {{ .Values.connectionMethod.node.socat.image.pullPolicy }}
          args:
            - -d
            - "UNIX-LISTEN:{{ .Values.connectionMethod.node.nodeSocket.path }},fork,reuseaddr,unlink-early"
            - "TCP:{{ .Values.connectionMethod.node.socat.nodeHost }}:{{ .Values.connectionMethod.node.socat.nodePort }}"
          volumeMounts:
            - name: cardanoipc
              mountPath: /ipc
        {{- end }}
      volumes:
        {{- if eq .Values.connectionMethod.node.enabled true }}
        - name: cardanoipc
          emptyDir: {}
        - name: config-dir
          emptyDir: {}
        {{- end }}
        - name: db
          {{- if .Values.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "kupo.fullname" . }}-db
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: db
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}